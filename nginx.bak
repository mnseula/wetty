
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections  1024;
}

http {
   # proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m;

    gzip on;
    gzip_types application/javascript application/rss+xml application/vnd.ms-fontobject
               application/x-font application/x-font-opentype application/x-font-otf
               application/x-font-truetype application/x-font-ttf application/x-javascript
               application/xhtml+xml application/xml font/opentype font/otf font/ttf
               image/svg+xml image/x-icon text/css #text/html
               text/javascript text/plain text/xml; # text/html is usually gzipped by default

    # Optional: Set the compression level (1-9), where 9 is the highest level (most compression).
    # gzip_comp_level 6;

    # Optional: Specify the minimum length of a response to trigger compression.
    # gzip_min_length 1000;

    # Optional: Specify the minimum HTTP version required for compression.
    # gzip_http_version 1.1;

    # Optional: Set the buffer size for gzipping operations.
    # gzip_buffers 16 8k;

    # Optional: Set the compression level for the specified types.
    # gzip_types specific/type specific/othertype;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        listen       [::]:80;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        error_page 404 /404.html;
        location = /404.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
    }

    server {
        listen 80;
        server_name mikkul.com www.mikkul.com;

        # Redirect all non-SSL requests to SSL version
        return 301 https://www.mikkul.com$request_uri;
    }

    server {
        listen 443 ssl;
        server_name portainer.mikkul.com;

        ssl_certificate /etc/letsencrypt/live/mikkul.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/mikkul.com-0001/privkey.pem;

        location / {
            expires -1;
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            proxy_pass http://localhost:9082;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    #server {
    #    listen 443 ssl;
    #    server_name bit.mikkul.com;
    #
    #    ssl_certificate /etc/letsencrypt/live/mikkul.com-0001/fullchain.pem;
    #    ssl_certificate_key /etc/letsencrypt/live/mikkul.com-0001/privkey.pem;
    #
    #    location / {
    #        expires -1;
    #        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    #        proxy_pass http://localhost:9081;
    #        proxy_set_header Host $host;
    #        proxy_set_header X-Real-IP $remote_addr;
    #        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #        proxy_set_header X-Forwarded-Proto $scheme;
    #    }
    #
    #    # Redundant if already on SSL
    #    # if ($scheme != https) {
    #    #     return 301 https://$host$request_uri;
    #    # }
    #}

    server {
        listen 443 ssl;
        server_name mikkul.com www.mikkul.com;

        ssl_certificate /etc/letsencrypt/live/mikkul.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/mikkul.com-0001/privkey.pem;

        # Gzip compression settings for this server (overrides global if needed)
        gzip_comp_level 9;  # Maximum compression level
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml+rss;

        location / {
            proxy_pass http://localhost:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;  # Preserve the original request scheme (https).
            proxy_redirect http:// https://;             # Replace http:// with https:// in response headers.
        }
    }

    # HTTP redirect for instantgourmethub.com
    server {
        listen 80;
        server_name instantgourmethub.com www.instantgourmethub.com;

        if ($host = www.instantgourmethub.com) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        if ($host = instantgourmethub.com) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        # The if blocks above handle the redirection for the specified server names.
        # If no match, Nginx might serve default or error. A general return can be a fallback.
        # return 301 https://instantgourmethub.com$request_uri; # Fallback if needed
    }

    server {
        listen 443 ssl;
        server_name bit.mikkul.com;

        ssl_certificate /etc/letsencrypt/live/mikkul.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/mikkul.com-0001/privkey.pem;

        location / {
            expires -1;
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            proxy_pass http://localhost:6060;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl;
        server_name yacht.mikkul.com;

        ssl_certificate /etc/letsencrypt/live/mikkul.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/mikkul.com-0001/privkey.pem;

        location / {
            expires -1;
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            proxy_pass http://localhost:3031;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 80;
        server_name ftp.mikkul.com;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name oscar.mikkul.com;

        ssl_certificate /etc/letsencrypt/live/mikkul.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/mikkul.com-0001/privkey.pem;

        location / {
            expires -1;
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            proxy_pass http://localhost:9091;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl http2; # Added http2 for potential performance benefits
        server_name ftp.mikkul.com;

        ssl_certificate /etc/letsencrypt/live/mikkul.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/mikkul.com-0001/privkey.pem;

        # SSL hardening (optional but recommended)
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_prefer_server_ciphers off;
        # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

        location / {
            # Consider removing these cache headers if they interfere with dynamic content,
            # or set them more specifically if needed. For API calls, often no-cache is desired.
            # expires -1;
            # add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';

            # Ensure this port matches where Uvicorn is listening
            # If using Docker Compose, replace localhost with the service name of your FastAPI app
            proxy_pass http://localhost:8585; # Assuming Uvicorn runs on 8000 and Nginx can reach it

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # This is crucial

            # Optional: Increase proxy timeouts if you have long-running requests
            # proxy_connect_timeout 600s;
            # proxy_send_timeout 600s;
            # proxy_read_timeout 600s;

            # Handle OPTIONS preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://oscar.mikkul.com'; # Ensure this is specific
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS'; # Be specific or use '*'
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With'; # Be specific or use '*'
                add_header 'Access-Control-Allow-Credentials' 'true'; # If you use credentials
                add_header 'Access-Control-Max-Age' '86400'; # Cache preflight for 1 day
                return 204;
            }
        }

        location = /docs {
            return 301 /;
        }
        location = /redoc {
            return 301 /;
        }
        location = /openapi.json {
            return 301 /;
        }

        # Optional: Add access and error logs for easier debugging
        # access_log /var/log/nginx/ftp.mikkul.com.access.log;
        # error_log /var/log/nginx/ftp.mikkul.com.error.log;
    }

    server {
        listen 443 ssl;
        server_name quikconvertpro.app www.quikconvertpro.app;

        ssl_certificate /etc/letsencrypt/live/quikconvertpro.app/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/quikconvertpro.app/privkey.pem;

        # Optional: Additional SSL settings for security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://localhost:7000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Optional: Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name quikconvertpro.app www.quikconvertpro.app;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name pdftidy.com www.pdftidy.com;

        ssl_certificate /etc/letsencrypt/live/pdftidy.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/pdftidy.com/privkey.pem;

        # Optional: Additional SSL settings for security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://localhost:9091;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTP server block for Certbot validation and potential redirection.
    server {
        listen 80;
        server_name pdftidy.com www.pdftidy.com;

        location /.well-known/acme-challenge/ {
            root /usr/share/nginx/html;
            allow all;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }
}
